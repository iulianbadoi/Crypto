clear all
close all


x = -10:0.01:10;

% plotting boundaries
% Y1 = sqrt(2.*x - 1);
Y2 = (9 - 0.8*(x.^2)) ./ 2;


figure

hold on
plot((x.^2 + 1) / 2, x); % pirmas constraint
plot(x, Y2);

legend('2 * x - y^2 - 1 = 0', '9 - 0.8 * x^2 - 2 * y = 0');
plot(x, 5*ones(size(x)), 'b');
plot(x, -5*ones(size(x)), 'b');
plot(5*ones(size(x)), x, 'b');
plot(-5*ones(size(x)), x, 'b');

% f(x,y) = -x - y
% subject to 2x - y^2 - 1 >= 0
% and 9 - 0.8*x^2 - 2y >= 0

% linearization of constraints
% new constraints -5 <= x <= 5 , -5 <= y <= 5
x_min = -5; x_max = 5;
y_min = -5; y_max = 5;

% Iterate while most demaged function is more than EPS
EPS = 1e-5;
f = [-1; -1];
    A =  [1 2
          3 4];
    b = [1 2];
    lb = [-5; -5];
    ub = [5; 5];
hold on
X = [0,0];
for i = 1:1000
    % Damaged constraint etiher will be from out intial set(qudration
    % function) or from additional set - linear function
    
    [x,fval,exitflag,output,lambda] = linprog(f,A,b,[],[],lb,ub);
    x
    X = x;
    
    % stuff
    if(g1(X) < g2(X))
        [grad_x, grad_y] = grad_g1(X);
        A = [A; -grad_x -grad_y];
        b = [b g1(X)+X(1)*grad_x+X(2)*grad_y];
    else
        [grad_x, grad_y] = grad_g2(X);
        A = [A; -grad_x -grad_y];
        b = [b  g2(X)-X(1)*grad_x+X(2)*grad_y]; 
    end
    
    plot(x(1), x(2), 'xr')
end

% f(x,y) = -x -2y
% g1(x,y) = 1 - x^2 - y >= 0
% g2(x,y) = y >= 0
%
% Limits: -2 <= x <= 2
%         -1 <= y <= 2
%
% LPP0 yields X0 = [2; 2]
%
% Linearize g1 at X0: -4x -y >= -5
%
